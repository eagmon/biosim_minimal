"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeWebpackBrowserBuilder = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const fs_1 = require("fs");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const angular_version_utils_1 = require("../../executors/utilities/angular-version-utils");
const buildable_libs_1 = require("../utilities/buildable-libs");
const webpack_1 = require("../utilities/webpack");
function buildApp(options, context) {
    const { buildLibsFromSource, customWebpackConfig, indexFileTransformer } = options, delegateOptions = tslib_1.__rest(options, ["buildLibsFromSource", "customWebpackConfig", "indexFileTransformer"]);
    // If there is a path to an indexFileTransformer
    // check it exists and apply it to the build
    const pathToIndexFileTransformer = indexFileTransformer &&
        (0, devkit_1.joinPathFragments)(context.workspaceRoot, indexFileTransformer);
    if (pathToIndexFileTransformer && !(0, fs_1.existsSync)(pathToIndexFileTransformer)) {
        throw new Error(`File containing Index File Transformer function Not Found!\n Please ensure the path to the file containing the function is correct: \n${pathToIndexFileTransformer}`);
    }
    // If there is a path to custom webpack config
    // Invoke our own support for custom webpack config
    if (customWebpackConfig && customWebpackConfig.path) {
        const pathToWebpackConfig = (0, devkit_1.joinPathFragments)(context.workspaceRoot, customWebpackConfig.path);
        if ((0, fs_1.existsSync)(pathToWebpackConfig)) {
            return buildAppWithCustomWebpackConfiguration(delegateOptions, context, pathToWebpackConfig, pathToIndexFileTransformer);
        }
        else {
            throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
        }
    }
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_1.switchMap)(({ executeBrowserBuilder }) => executeBrowserBuilder(delegateOptions, context, Object.assign({}, (pathToIndexFileTransformer
        ? {
            indexHtml: (0, webpack_1.resolveIndexHtmlTransformer)(pathToIndexFileTransformer, options.tsConfig, context.target),
        }
        : {})))));
}
function buildAppWithCustomWebpackConfiguration(options, context, pathToWebpackConfig, pathToIndexFileTransformer) {
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_1.switchMap)(({ executeBrowserBuilder }) => executeBrowserBuilder(options, context, Object.assign({ webpackConfiguration: (baseWebpackConfig) => (0, webpack_1.mergeCustomWebpackConfig)(baseWebpackConfig, pathToWebpackConfig, options, context.target) }, (pathToIndexFileTransformer
        ? {
            indexHtml: (0, webpack_1.resolveIndexHtmlTransformer)(pathToIndexFileTransformer, options.tsConfig, context.target),
        }
        : {})))));
}
function validateOptions(options) {
    const { major, version } = (0, angular_version_utils_1.getInstalledAngularVersionInfo)();
    if (major < 15 && Array.isArray(options.polyfills)) {
        throw new Error((0, devkit_1.stripIndents) `The array syntax for the "polyfills" option is supported from Angular >= 15.0.0. You are currently using ${version}.
    You can resolve this error by removing the "polyfills" option, setting it to a string value or migrating to Angular 15.0.0.`);
    }
}
function executeWebpackBrowserBuilder(options, context) {
    var _a;
    validateOptions(options);
    (_a = options.buildLibsFromSource) !== null && _a !== void 0 ? _a : (options.buildLibsFromSource = true);
    if (!options.buildLibsFromSource) {
        const { tsConfigPath } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(options.tsConfig, context);
        options.tsConfig = tsConfigPath;
    }
    return buildApp(options, context);
}
exports.executeWebpackBrowserBuilder = executeWebpackBrowserBuilder;
exports.default = require('@angular-devkit/architect').createBuilder(executeWebpackBrowserBuilder);
//# sourceMappingURL=webpack-browser.impl.js.map