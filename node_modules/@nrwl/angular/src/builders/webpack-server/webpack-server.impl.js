"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeWebpackServerBuilder = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const fs_1 = require("fs");
const rxjs_1 = require("rxjs");
const webpack_1 = require("../utilities/webpack");
const buildable_libs_1 = require("../utilities/buildable-libs");
const operators_1 = require("rxjs/operators");
const angular_version_utils_1 = require("../../executors/utilities/angular-version-utils");
const semver_1 = require("semver");
function buildServerApp(options, context) {
    const { buildLibsFromSource, customWebpackConfig } = options, delegateOptions = tslib_1.__rest(options, ["buildLibsFromSource", "customWebpackConfig"]);
    // If there is a path to custom webpack config
    // Invoke our own support for custom webpack config
    if (customWebpackConfig && customWebpackConfig.path) {
        const pathToWebpackConfig = (0, devkit_1.joinPathFragments)(context.workspaceRoot, customWebpackConfig.path);
        if ((0, fs_1.existsSync)(pathToWebpackConfig)) {
            return buildServerAppWithCustomWebpackConfiguration(delegateOptions, context, pathToWebpackConfig);
        }
        else {
            throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
        }
    }
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_1.switchMap)(({ executeServerBuilder }) => executeServerBuilder(delegateOptions, context)));
}
function buildServerAppWithCustomWebpackConfiguration(options, context, pathToWebpackConfig) {
    return (0, rxjs_1.from)(Promise.resolve().then(() => require('@angular-devkit/build-angular'))).pipe((0, operators_1.switchMap)(({ executeServerBuilder }) => executeServerBuilder(options, context, {
        webpackConfiguration: (baseWebpackConfig) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Angular 15 auto includes code from @angular/platform-server
            // This includes the code outside the shared scope created by ModuleFederation
            // This code will be included in the generated code from our generators,
            // maintaining it within the shared scope.
            // Therefore, if the build is an MF Server build, remove the auto-includes from
            // the base webpack config from Angular
            let mergedConfig = yield (0, webpack_1.mergeCustomWebpackConfig)(baseWebpackConfig, pathToWebpackConfig, options, context.target);
            if (mergedConfig.plugins
                .map((p) => p.constructor.name)
                .includes('UniversalFederationPlugin')) {
                mergedConfig.entry.main = mergedConfig.entry.main.filter((m) => !m.startsWith('@angular/platform-server/init'));
                mergedConfig.module.rules = mergedConfig.module.rules.filter((m) => !m.loader
                    ? true
                    : !m.loader.endsWith('@angular-devkit/build-angular/src/builders/server/platform-server-exports-loader.js'));
            }
            return mergedConfig;
        }),
    })));
}
function executeWebpackServerBuilder(options, context) {
    var _a;
    const installedAngularVersionInfo = (0, angular_version_utils_1.getInstalledAngularVersionInfo)();
    if ((0, semver_1.lt)(installedAngularVersionInfo.version, '15.1.0') &&
        Array.isArray(options.assets) &&
        options.assets.length > 0) {
        throw new Error((0, devkit_1.stripIndents) `The "assets" option is only supported in Angular >= 15.1.0. You are currently using ${installedAngularVersionInfo.version}.
    You can resolve this error by removing the "assets" option or by migrating to Angular 15.1.0.`);
    }
    if ((0, semver_1.gte)(installedAngularVersionInfo.version, '15.0.0') &&
        options.bundleDependencies) {
        throw new Error((0, devkit_1.stripIndents) `The "bundleDependencies" option was removed in Angular version 15. You are currently using ${installedAngularVersionInfo.version}.
    You can resolve this error by removing the "bundleDependencies" option.`);
    }
    // default bundleDependencies to true if supported by Angular version
    if ((0, semver_1.lt)(installedAngularVersionInfo.version, '15.0.0') &&
        options.bundleDependencies === undefined) {
        options.bundleDependencies = true;
    }
    (_a = options.buildLibsFromSource) !== null && _a !== void 0 ? _a : (options.buildLibsFromSource = true);
    if (!options.buildLibsFromSource) {
        const { tsConfigPath } = (0, buildable_libs_1.createTmpTsConfigForBuildableLibs)(options.tsConfig, context);
        options.tsConfig = tsConfigPath;
    }
    return buildServerApp(options, context);
}
exports.executeWebpackServerBuilder = executeWebpackServerBuilder;
exports.default = require('@angular-devkit/architect').createBuilder(executeWebpackServerBuilder);
//# sourceMappingURL=webpack-server.impl.js.map