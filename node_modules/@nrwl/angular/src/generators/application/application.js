"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const test_runners_1 = require("../../utils/test-runners");
const init_1 = require("../init/init");
const setup_tailwind_1 = require("../setup-tailwind/setup-tailwind");
const version_utils_1 = require("../utils/version-utils");
const lib_1 = require("./lib");
const semver_1 = require("semver");
function applicationGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const installedAngularVersionInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
        if ((0, semver_1.lt)(installedAngularVersionInfo.version, '14.1.0') && schema.standalone) {
            throw new Error((0, devkit_1.stripIndents) `The "standalone" option is only supported in Angular >= 14.1.0. You are currently using ${installedAngularVersionInfo.version}.
    You can resolve this error by removing the "standalone" option or by migrating to Angular 14.1.0.`);
        }
        const generatorDirectory = (0, version_utils_1.getGeneratorDirectoryForInstalledAngularVersion)(tree);
        if (generatorDirectory) {
            let previousGenerator = yield Promise.resolve().then(() => require((0, path_1.join)(__dirname, generatorDirectory, 'application')));
            return yield previousGenerator.default(tree, schema);
        }
        const options = (0, lib_1.normalizeOptions)(tree, schema);
        yield (0, init_1.angularInitGenerator)(tree, Object.assign(Object.assign({}, options), { skipFormat: true }));
        const { wrapAngularDevkitSchematic } = require('@nrwl/devkit/ngcli-adapter');
        const angularAppSchematic = wrapAngularDevkitSchematic('@schematics/angular', 'application');
        yield angularAppSchematic(tree, {
            name: options.name,
            inlineStyle: options.inlineStyle,
            inlineTemplate: options.inlineTemplate,
            prefix: options.prefix,
            skipTests: options.skipTests,
            style: options.style,
            viewEncapsulation: options.viewEncapsulation,
            routing: false,
            skipInstall: true,
            skipPackageJson: options.skipPackageJson,
        });
        if (options.ngCliSchematicAppRoot !== options.appProjectRoot) {
            (0, devkit_1.moveFilesToNewDirectory)(tree, options.ngCliSchematicAppRoot, options.appProjectRoot);
        }
        (0, lib_1.createFiles)(tree, options);
        (0, lib_1.updateConfigFiles)(tree, options);
        (0, lib_1.updateAppComponentTemplate)(tree, options);
        if (!options.minimal) {
            // Create the NxWelcomeComponent
            const angularComponentSchematic = wrapAngularDevkitSchematic('@schematics/angular', 'component');
            yield angularComponentSchematic(tree, {
                name: 'NxWelcome',
                inlineTemplate: true,
                inlineStyle: true,
                prefix: options.prefix,
                skipTests: true,
                style: options.style,
                flat: true,
                viewEncapsulation: 'None',
                project: options.name,
                standalone: options.standalone,
            });
            (0, lib_1.updateNxComponentTemplate)(tree, options);
        }
        if (options.addTailwind) {
            yield (0, setup_tailwind_1.setupTailwindGenerator)(tree, {
                project: options.name,
                skipFormat: true,
                skipPackageJson: options.skipPackageJson,
            });
        }
        if (options.unitTestRunner !== test_runners_1.UnitTestRunner.None) {
            (0, lib_1.updateComponentSpec)(tree, options);
        }
        if (options.routing) {
            (0, lib_1.addRouterRootConfiguration)(tree, options);
        }
        yield (0, lib_1.addLinting)(tree, options);
        yield (0, lib_1.addUnitTestRunner)(tree, options);
        yield (0, lib_1.addE2e)(tree, options);
        (0, lib_1.updateEditorTsConfig)(tree, options);
        if (options.rootProject) {
            const nxJson = (0, devkit_1.readNxJson)(tree);
            nxJson.defaultProject = options.name;
            (0, devkit_1.updateNxJson)(tree, nxJson);
        }
        if (options.backendProject) {
            (0, lib_1.addProxyConfig)(tree, options);
        }
        if (options.strict) {
            (0, lib_1.enableStrictTypeChecking)(tree, options);
        }
        else {
            (0, lib_1.setApplicationStrictDefault)(tree, false);
        }
        if (options.standalone) {
            (0, lib_1.convertToStandaloneApp)(tree, options);
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return () => {
            (0, devkit_1.installPackagesTask)(tree);
        };
    });
}
exports.applicationGenerator = applicationGenerator;
exports.default = applicationGenerator;
//# sourceMappingURL=application.js.map