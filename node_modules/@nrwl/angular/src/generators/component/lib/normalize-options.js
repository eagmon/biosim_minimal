"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const find_project_for_path_1 = require("nx/src/project-graph/utils/find-project-for-path");
function findProjectFromOptions(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectGraph = yield (0, devkit_1.createProjectGraphAsync)();
        const projectRootMappings = (0, find_project_for_path_1.createProjectRootMappings)(projectGraph.nodes);
        // path can be undefined when running on the root of the workspace, we default to the root
        // to handle standalone layouts
        return (0, find_project_for_path_1.findProjectForPath)(options.path || '', projectRootMappings);
    });
}
function normalizeOptions(tree, options) {
    var _a, _b, _c;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const project = (_b = (_a = options.project) !== null && _a !== void 0 ? _a : (yield findProjectFromOptions(options))) !== null && _b !== void 0 ? _b : (0, devkit_1.readNxJson)(tree).defaultProject;
        if (!project) {
            // path is hidden, so if not provided we don't suggest setting it
            if (!options.path) {
                throw new Error('No "project" was specified and "defaultProject" is not set in the workspace configuration. Please provide the "project" option and try again.');
            }
            // path was provided, so it's wrong and we should mention it
            throw new Error('The provided "path" is wrong and no "project" was specified and "defaultProject" is not set in the workspace configuration. ' +
                'Please provide a correct "path" or provide the "project" option instead and try again.');
        }
        const { projectType, root, sourceRoot } = (0, devkit_1.readProjectConfiguration)(tree, project);
        const projectSourceRoot = sourceRoot !== null && sourceRoot !== void 0 ? sourceRoot : (0, devkit_1.joinPathFragments)(root, 'src');
        const path = (_c = options.path) !== null && _c !== void 0 ? _c : (0, devkit_1.joinPathFragments)(projectSourceRoot, projectType === 'application' ? 'app' : 'lib');
        return Object.assign(Object.assign({}, options), { path,
            project,
            projectSourceRoot });
    });
}
exports.normalizeOptions = normalizeOptions;
//# sourceMappingURL=normalize-options.js.map