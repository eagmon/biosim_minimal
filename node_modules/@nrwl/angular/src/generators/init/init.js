"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.angularInitGenerator = void 0;
const tslib_1 = require("tslib");
const cypress_1 = require("@nrwl/cypress");
const devkit_1 = require("@nrwl/devkit");
const jest_1 = require("@nrwl/jest");
const linter_1 = require("@nrwl/linter");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const path_1 = require("path");
const test_runners_1 = require("../../utils/test-runners");
const versions_1 = require("../../utils/versions");
const karma_1 = require("../karma/karma");
const version_utils_1 = require("../utils/version-utils");
function angularInitGenerator(tree, rawOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const generatorDirectory = (0, version_utils_1.getGeneratorDirectoryForInstalledAngularVersion)(tree);
        if (generatorDirectory) {
            let previousGenerator = yield Promise.resolve().then(() => require((0, path_1.join)(__dirname, generatorDirectory, 'init')));
            yield previousGenerator.default(tree, rawOptions);
            return;
        }
        const peerDepsToInstall = [
            '@angular-devkit/core',
            '@angular-devkit/schematics',
            '@schematics/angular',
        ];
        let devkitVersion;
        peerDepsToInstall.forEach((pkg) => {
            var _a;
            const packageVersion = (0, version_utils_1.getInstalledPackageVersion)(tree, pkg);
            if (!packageVersion) {
                devkitVersion !== null && devkitVersion !== void 0 ? devkitVersion : (devkitVersion = (_a = (0, version_utils_1.getInstalledPackageVersion)(tree, '@angular-devkit/build-angular')) !== null && _a !== void 0 ? _a : versions_1.angularDevkitVersion);
                (0, devkit_1.ensurePackage)(tree, pkg, devkitVersion);
            }
        });
        const options = normalizeOptions(rawOptions);
        setDefaults(tree, options);
        const depsTask = !options.skipPackageJson
            ? updateDependencies(tree)
            : () => { };
        const unitTestTask = yield addUnitTestRunner(tree, options);
        const e2eTask = addE2ETestRunner(tree, options);
        addGitIgnoreEntry(tree, '.angular');
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return (0, run_tasks_in_serial_1.runTasksInSerial)(depsTask, unitTestTask, e2eTask);
    });
}
exports.angularInitGenerator = angularInitGenerator;
function normalizeOptions(options) {
    var _a, _b, _c, _d, _e, _f, _g;
    return {
        e2eTestRunner: (_a = options.e2eTestRunner) !== null && _a !== void 0 ? _a : test_runners_1.E2eTestRunner.Cypress,
        linter: (_b = options.linter) !== null && _b !== void 0 ? _b : linter_1.Linter.EsLint,
        skipFormat: (_c = options.skipFormat) !== null && _c !== void 0 ? _c : false,
        skipInstall: (_d = options.skipInstall) !== null && _d !== void 0 ? _d : false,
        skipPackageJson: (_e = options.skipPackageJson) !== null && _e !== void 0 ? _e : false,
        style: (_f = options.style) !== null && _f !== void 0 ? _f : 'css',
        unitTestRunner: (_g = options.unitTestRunner) !== null && _g !== void 0 ? _g : test_runners_1.UnitTestRunner.Jest,
    };
}
function setDefaults(host, options) {
    const nxJson = (0, devkit_1.readNxJson)(host);
    nxJson.generators = nxJson.generators || {};
    nxJson.generators['@nrwl/angular:application'] = Object.assign({ style: options.style, linter: options.linter, unitTestRunner: options.unitTestRunner, e2eTestRunner: options.e2eTestRunner }, (nxJson.generators['@nrwl/angular:application'] || {}));
    nxJson.generators['@nrwl/angular:library'] = Object.assign({ linter: options.linter, unitTestRunner: options.unitTestRunner }, (nxJson.generators['@nrwl/angular:library'] || {}));
    nxJson.generators['@nrwl/angular:component'] = Object.assign({ style: options.style }, (nxJson.generators['@nrwl/angular:component'] || {}));
    (0, devkit_1.updateNxJson)(host, nxJson);
}
function updateDependencies(tree) {
    var _a, _b;
    const angularVersionToInstall = (_a = (0, version_utils_1.getInstalledPackageVersion)(tree, '@angular/core')) !== null && _a !== void 0 ? _a : versions_1.angularVersion;
    const angularDevkitVersionToInstall = (_b = (0, version_utils_1.getInstalledPackageVersion)(tree, '@angular-devkit/build-angular')) !== null && _b !== void 0 ? _b : versions_1.angularDevkitVersion;
    return (0, version_utils_1.addDependenciesToPackageJsonIfDontExist)(tree, {
        '@angular/animations': angularVersionToInstall,
        '@angular/common': angularVersionToInstall,
        '@angular/compiler': angularVersionToInstall,
        '@angular/core': angularVersionToInstall,
        '@angular/forms': angularVersionToInstall,
        '@angular/platform-browser': angularVersionToInstall,
        '@angular/platform-browser-dynamic': angularVersionToInstall,
        '@angular/router': angularVersionToInstall,
        rxjs: versions_1.rxjsVersion,
        tslib: versions_1.tsLibVersion,
        'zone.js': versions_1.zoneJsVersion,
    }, {
        '@angular/cli': angularDevkitVersionToInstall,
        '@angular/compiler-cli': angularVersionToInstall,
        '@angular/language-service': angularVersionToInstall,
        '@angular-devkit/build-angular': angularDevkitVersionToInstall,
    });
}
function addUnitTestRunner(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (options.unitTestRunner) {
            case test_runners_1.UnitTestRunner.Karma:
                return yield (0, karma_1.karmaGenerator)(tree, {
                    skipPackageJson: options.skipPackageJson,
                });
            case test_runners_1.UnitTestRunner.Jest:
                if (!options.skipPackageJson) {
                    (0, version_utils_1.addDependenciesToPackageJsonIfDontExist)(tree, {}, {
                        'jest-preset-angular': versions_1.jestPresetAngularVersion,
                    });
                }
                return (0, jest_1.jestInitGenerator)(tree, {
                    skipPackageJson: options.skipPackageJson,
                });
            default:
                return () => { };
        }
    });
}
function addE2ETestRunner(tree, options) {
    switch (options.e2eTestRunner) {
        case test_runners_1.E2eTestRunner.Protractor:
            return !options.skipPackageJson
                ? (0, version_utils_1.addDependenciesToPackageJsonIfDontExist)(tree, {}, {
                    protractor: versions_1.protractorVersion,
                    'jasmine-core': versions_1.jasmineCoreVersion,
                    'jasmine-spec-reporter': versions_1.jasmineSpecReporterVersion,
                    'ts-node': versions_1.tsNodeVersion,
                    '@types/jasmine': versions_1.typesJasmineVersion,
                    '@types/jasminewd2': versions_1.typesJasminewd2Version,
                })
                : () => { };
        case test_runners_1.E2eTestRunner.Cypress:
            return (0, cypress_1.cypressInitGenerator)(tree, {
                skipPackageJson: options.skipPackageJson,
            });
        default:
            return () => { };
    }
}
function addGitIgnoreEntry(host, entry) {
    if (host.exists('.gitignore')) {
        let content = host.read('.gitignore', 'utf-8');
        if (/^\.angular$/gm.test(content)) {
            return;
        }
        content = `${content}\n${entry}\n`;
        host.write('.gitignore', content);
    }
    else {
        devkit_1.logger.warn(`Couldn't find .gitignore file to update`);
    }
}
exports.default = angularInitGenerator;
//# sourceMappingURL=init.js.map