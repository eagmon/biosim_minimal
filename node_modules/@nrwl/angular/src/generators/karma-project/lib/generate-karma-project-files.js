"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateKarmaProjectFiles = void 0;
const devkit_1 = require("@nrwl/devkit");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const version_utils_1 = require("../../utils/version-utils");
const v14_test_file_1 = require("./v14-test-file");
function generateKarmaProjectFiles(tree, project) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, project);
    (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '..', 'files', 'common'), projectConfig.root, {
        tmpl: '',
        projectRoot: projectConfig.root,
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(projectConfig.root),
    });
    if (projectConfig.root === '' || projectConfig.root === '.') {
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '..', 'files', 'root-project'), projectConfig.root, {
            tmpl: '',
            projectName: project,
        });
    }
    else if (isWorkspaceWithProjectAtRoot(tree)) {
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, '..', 'files', 'workspace-with-root-project'), projectConfig.root, {
            tmpl: '',
            projectRoot: projectConfig.root,
            offsetFromRoot: (0, devkit_1.offsetFromRoot)(projectConfig.root),
            rootProjectWithConfigSet: isUsingConfigSetInBaseKarmaConfig(tree),
        });
    }
    const installedAngularVersion = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    if (installedAngularVersion.major === 14) {
        tree.write((0, devkit_1.joinPathFragments)(projectConfig.sourceRoot, 'test.ts'), (0, v14_test_file_1.v14TestFile)({ isLibrary: projectConfig.projectType === 'library' }));
    }
}
exports.generateKarmaProjectFiles = generateKarmaProjectFiles;
function isWorkspaceWithProjectAtRoot(tree) {
    const projects = (0, devkit_1.getProjects)(tree);
    for (const [, project] of projects) {
        if (project.root === '.' || project.root === '') {
            return true;
        }
    }
    return false;
}
function isUsingConfigSetInBaseKarmaConfig(tree) {
    if (!tree.exists('karma.conf.js')) {
        return false;
    }
    const CONFIG_SET_SELECTOR = 'PropertyAccessExpression:has(Identifier[name=config], Identifier[name=set])';
    const ast = tsquery_1.tsquery.ast(tree.read('karma.conf.js', 'utf-8'));
    const nodes = (0, tsquery_1.tsquery)(ast, CONFIG_SET_SELECTOR, { visitAllChildren: true });
    return nodes.length > 0;
}
//# sourceMappingURL=generate-karma-project-files.js.map