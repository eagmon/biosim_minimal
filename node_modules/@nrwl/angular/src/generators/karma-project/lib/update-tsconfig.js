"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTsConfigs = void 0;
const devkit_1 = require("@nrwl/devkit");
const version_utils_1 = require("../../utils/version-utils");
function updateTsConfigs(tree, project) {
    var _a, _b;
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, project);
    (0, devkit_1.updateJson)(tree, (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.json'), (json) => {
        return Object.assign(Object.assign({}, json), { references: [
                ...(json.references || []),
                {
                    path: './tsconfig.spec.json',
                },
            ] });
    });
    const installedAngularVersion = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    let extraFiles = installedAngularVersion.major === 14 ? ['src/test.ts'] : [];
    if (projectConfig.projectType == 'application' &&
        ((_b = (_a = projectConfig.targets.build) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.polyfills) &&
        typeof projectConfig.targets.build.options.polyfills === 'string') {
        let polyfillsPath = projectConfig.targets.build.options.polyfills;
        polyfillsPath = polyfillsPath.startsWith(projectConfig.root)
            ? polyfillsPath.replace(`${projectConfig.root}/`, '')
            : polyfillsPath;
        extraFiles = [...extraFiles, polyfillsPath];
    }
    if (!extraFiles.length) {
        return;
    }
    (0, devkit_1.updateJson)(tree, (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.spec.json'), (json) => {
        var _a;
        return Object.assign(Object.assign({}, json), { files: [...((_a = json.files) !== null && _a !== void 0 ? _a : []), ...extraFiles] });
    });
}
exports.updateTsConfigs = updateTsConfigs;
//# sourceMappingURL=update-tsconfig.js.map