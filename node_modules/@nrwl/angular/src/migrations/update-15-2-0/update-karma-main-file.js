"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const schematics_1 = require("@angular-devkit/schematics");
const ts = require("typescript");
const utility_1 = require("@schematics/angular/utility");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
const workspace_1 = require("@schematics/angular/utility/workspace");
const workspace_2 = require("@nrwl/workspace");
function default_1() {
    return (0, schematics_1.chain)([
        (host) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            for (const file of yield findTestMainFiles(host)) {
                updateTestFile(host, file);
            }
        }),
        (0, workspace_2.formatFiles)(),
    ]);
}
exports.default = default_1;
function findTestMainFiles(host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const testFiles = new Set();
        const workspace = yield (0, utility_1.readWorkspace)(host);
        // find all test.ts files.
        for (const project of workspace.projects.values()) {
            for (const target of project.targets.values()) {
                if (target.builder !== workspace_models_1.Builders.Karma) {
                    continue;
                }
                for (const [, options] of (0, workspace_1.allTargetOptions)(target)) {
                    if (typeof options.main === 'string' && host.exists(options.main)) {
                        testFiles.add(options.main);
                    }
                }
            }
        }
        return testFiles;
    });
}
function updateTestFile(host, file) {
    const content = host.readText(file);
    if (!content.includes('require.context')) {
        return;
    }
    const sourceFile = ts.createSourceFile(file, content.replace(/^\uFEFF/, ''), ts.ScriptTarget.Latest, true);
    const usedVariableNames = new Set();
    const recorder = host.beginUpdate(sourceFile.fileName);
    ts.forEachChild(sourceFile, (node) => {
        var _a, _b;
        if (ts.isVariableStatement(node)) {
            const variableDeclaration = node.declarationList.declarations[0];
            if ((_a = ts
                .getModifiers(node)) === null || _a === void 0 ? void 0 : _a.some((m) => m.kind === ts.SyntaxKind.DeclareKeyword)) {
                // `declare const require`
                if (variableDeclaration.name.getText() !== 'require') {
                    return;
                }
            }
            else {
                // `const context = require.context('./', true, /\.spec\.ts$/);`
                if (!((_b = variableDeclaration.initializer) === null || _b === void 0 ? void 0 : _b.getText().startsWith('require.context'))) {
                    return;
                }
                // add variable name as used.
                usedVariableNames.add(variableDeclaration.name.getText());
            }
            // Delete node.
            recorder.remove(node.getFullStart(), node.getFullWidth());
        }
        if (usedVariableNames.size &&
            ts.isExpressionStatement(node) && // context.keys().map(context);
            ts.isCallExpression(node.expression) && // context.keys().map(context);
            ts.isPropertyAccessExpression(node.expression.expression) && // context.keys().map
            ts.isCallExpression(node.expression.expression.expression) && // context.keys()
            ts.isPropertyAccessExpression(node.expression.expression.expression.expression) && // context.keys
            ts.isIdentifier(node.expression.expression.expression.expression.expression) && // context
            usedVariableNames.has(node.expression.expression.expression.expression.expression.getText())) {
            // `context.keys().map(context);`
            // `context.keys().forEach(context);`
            recorder.remove(node.getFullStart(), node.getFullWidth());
        }
    });
    host.commitUpdate(recorder);
}
//# sourceMappingURL=update-karma-main-file.js.map