"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleFederationConfig = exports.DEFAULT_ANGULAR_PACKAGES_TO_SHARE = exports.DEFAULT_NPM_PACKAGES_TO_AVOID = exports.applyDefaultEagerPackages = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
function applyDefaultEagerPackages(sharedConfig) {
    const DEFAULT_PACKAGES_TO_LOAD_EAGERLY = [
        '@angular/localize',
        '@angular/localize/init',
    ];
    for (const pkg of DEFAULT_PACKAGES_TO_LOAD_EAGERLY) {
        if (!sharedConfig[pkg]) {
            continue;
        }
        sharedConfig[pkg] = Object.assign(Object.assign({}, sharedConfig[pkg]), { eager: true });
    }
}
exports.applyDefaultEagerPackages = applyDefaultEagerPackages;
exports.DEFAULT_NPM_PACKAGES_TO_AVOID = ['zone.js', '@nrwl/angular/mf'];
exports.DEFAULT_ANGULAR_PACKAGES_TO_SHARE = [
    '@angular/animations',
    '@angular/common',
];
function getModuleFederationConfig(mfConfig, determineRemoteUrl, options = { isServer: false }) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let projectGraph;
        try {
            projectGraph = (0, devkit_1.readCachedProjectGraph)();
        }
        catch (e) {
            projectGraph = yield (0, devkit_1.createProjectGraphAsync)();
        }
        const dependencies = (0, devkit_1.getDependentPackagesForProject)(projectGraph, mfConfig.name);
        const sharedLibraries = (0, devkit_1.shareWorkspaceLibraries)(dependencies.workspaceLibraries);
        const npmPackages = (0, devkit_1.sharePackages)(Array.from(new Set([
            ...exports.DEFAULT_ANGULAR_PACKAGES_TO_SHARE,
            ...dependencies.npmPackages.filter((pkg) => !exports.DEFAULT_NPM_PACKAGES_TO_AVOID.includes(pkg)),
        ])));
        exports.DEFAULT_NPM_PACKAGES_TO_AVOID.forEach((pkgName) => {
            if (pkgName in npmPackages) {
                delete npmPackages[pkgName];
            }
        });
        const sharedDependencies = Object.assign(Object.assign({}, sharedLibraries.getLibraries()), npmPackages);
        applyDefaultEagerPackages(sharedDependencies);
        (0, devkit_1.applySharedFunction)(sharedDependencies, mfConfig.shared);
        (0, devkit_1.applyAdditionalShared)(sharedDependencies, mfConfig.additionalShared, projectGraph);
        const mapRemotesFunction = options.isServer ? devkit_1.mapRemotesForSSR : devkit_1.mapRemotes;
        const mappedRemotes = !mfConfig.remotes || mfConfig.remotes.length === 0
            ? {}
            : mapRemotesFunction(mfConfig.remotes, 'mjs', determineRemoteUrl);
        return { sharedLibraries, sharedDependencies, mappedRemotes };
    });
}
exports.getModuleFederationConfig = getModuleFederationConfig;
//# sourceMappingURL=utils.js.map